{"version":3,"sources":["webpack:///./src/styles/projects.module.scss","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["module","exports","BlogIndex","location","data","siteTitle","site","siteMetadata","title","posts","mdx","edges","pathname","className","style","grid","map","node","frontmatter","date","description","featured","textcolor","x","fluid","childImageSharp","aspectRatio","ps","image","default","to","fields","slug","tile","overlay","color","pageQuery","loader","enqueue","React","createContext","m","require","ProdPageRenderer","pageResources","createElement","InternalPageRenderer","json"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,KAAO,+BAA+B,MAAQ,gCAAgC,QAAU,oC,29BCuC3FC,UAhCG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACvBC,EAAYD,EAAKE,KAAKC,aAAaC,MACnCC,EAAQL,EAAKM,IAAIC,MACvB,OACE,kBAAC,IAAD,CAASR,SAAUA,EAASS,SAAUJ,MAAOH,GAC3C,yBAAKQ,UAAWC,IAAMC,MAElBN,EAAMO,KAAI,YAAa,IAAXC,EAAU,EAAVA,KAAU,EACsCA,EAAKC,YAAvDV,EADY,EACZA,MAAOW,EADK,EACLA,KAAMC,EADD,EACCA,YAAaC,EADd,EACcA,SAAUC,EADxB,EACwBA,UACxCC,EAAI,KAMR,OAJEA,EADEF,EACE,kBAAC,IAAD,CAAKG,MAAK,KAAOH,EAASI,gBAAgBD,MAAhC,CAAuCE,YAAa,IAAIb,UAAWc,IAAGC,QAEhF,kBAAC,IAAD,CAAKJ,MAAK,KAAOpB,EAAKyB,QAAQJ,gBAAgBD,MAApC,CAA2CE,YAAa,IAAIb,UAAWc,IAAGC,QAGxF,kBAAC,IAAD,CAAME,GAAI,SAASb,EAAKc,OAAOC,KAAMnB,UAAWc,IAAGM,MACjD,yBAAKpB,UAAWc,IAAGO,QAASpB,MAAO,CAACqB,MAAOb,GAAa,UACtD,gCAASd,GAAe,6BACvBY,EAAY,6BACZD,GAEHI,SAYT,IAAMa,EAAS,c,kCC1CtB,sGAcyBC,QAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBzC,EAAOC,SALawC,EAKWC,EAAQ,UALRD,EAAEZ,SAAYY,G,geCsBhCE,UAjBU,SAAC,GAAiC,IAA/BxC,EAA8B,EAA9BA,SAAUyC,EAAoB,EAApBA,cACpC,OAAKA,EAGEL,IAAMM,cAAcC,I,+VAApB,EACL3C,WACAyC,iBACGA,EAAcG,OALV","file":"component---src-pages-index-js-ae2d35c50213184ff5e8.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"projects-module--tile--3UwiH\",\"image\":\"projects-module--image--26Xts\",\"overlay\":\"projects-module--overlay--3fj8J\"};","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport SLayout from '../components/slayout';\nimport '../styles/style.css';\nimport style from '../styles/photo-gallery.module.scss';\nimport ps from '../styles/projects.module.scss';\n\nconst BlogIndex = ({ location, data }) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.mdx.edges;\n  return (\n    <SLayout location={location.pathname} title={siteTitle}>\n      <div className={style.grid}>\n        {\n          posts.map(({node}) => {\n            const { title, date, description, featured, textcolor } = node.frontmatter;\n            let x = null;\n            if (featured) {\n              x = <Img fluid={{ ...featured.childImageSharp.fluid, aspectRatio: 1}} className={ps.image}/>;\n            } else {\n              x = <Img fluid={{ ...data.default.childImageSharp.fluid, aspectRatio: 1}} className={ps.image}/>;\n            }\n            return (\n              <Link to={'/posts'+node.fields.slug} className={ps.tile}>\n                <div className={ps.overlay} style={{color: textcolor || 'black'}}>\n                  <strong>{title}</strong><br/>\n                  {description}<br/>\n                  {date}\n                </div>\n              { x }\n              </Link>\n            );\n          })\n        }\n      </div>\n    </SLayout>\n  );\n}\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    mdx: allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fileAbsolutePath: { regex: \"/blog(.*)/\" } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            description\n            textcolor\n            featured {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    default: file(sourceInstanceName: {eq: \"assets\"}, relativePath: {eq: \"default.jpg\"}) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}