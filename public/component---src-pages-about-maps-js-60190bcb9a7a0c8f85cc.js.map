{"version":3,"sources":["webpack:///./src/config/map-metadata.js","webpack:///./src/components/world-map.js","webpack:///./src/components/us-map.js","webpack:///./src/components/ny-map.js","webpack:///./src/components/visited-stat.js","webpack:///./src/pages/about/maps.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/utils/typography.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["visited","europe","europe_iso","asia","asia_iso","north_america","north_america_iso","south_america","south_america_iso","us_states","us_cities","us_cities_markers","markerOffset","name","coordinates","new_york_counties","wrapperStyles","width","maxWidth","margin","WorldMap","render","v","scale","center","visitedColor","this","props","color","hoverColor","continent","Set","react_default","a","createElement","style","lib","projectionConfig","height","disablePanning","geography","geographies","projection","map","i","id","key","default","fill","has","stroke","strokeWidth","outline","hover","pressed","Component","markers","USMap","renderMarkers","marker","cx","cy","r","opacity","textAnchor","y","fontFamily","fontSize","showMarkers","properties","NAME_1","include","NYMap","NAME","VisitedStat","stat","tags","forEach","x","push","tag","gatsby_browser_entry","boxShadow","row","gutter","col","span","statistic","title","value","length","Title","Typography","Text","Paragraph","Maps","Tabs","TabPane","siteTitle","data","site","siteMetadata","layout","location","seo","level","divider","ny_map","us_map","visited_stat","world_map","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","m","module","exports","require","rhythm","typography__WEBPACK_IMPORTED_MODULE_0__","typography","headerFontFamily","bodyFontFamily","ProdPageRenderer","_ref","pageResources","InternalPageRenderer","Object","assign","json","Layout","header","_this$props","children","pathname","react__WEBPACK_IMPORTED_MODULE_2___default","marginBottom","marginTop","gatsby__WEBPACK_IMPORTED_MODULE_3__","textDecoration","to","breadcrumbs","split","nav","filter","elem","page","url","crumb","charAt","toUpperCase","slice","join","antd__WEBPACK_IMPORTED_MODULE_6__","Item","Fragment","antd__WEBPACK_IMPORTED_MODULE_7__","type","antd__WEBPACK_IMPORTED_MODULE_8__","marginLeft","marginRight","padding","textAlign","Date","getFullYear","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"yLAwEeA,EAxEC,CACdC,OAAQ,CACN,iBACA,SACA,cACA,UACA,QACA,SACA,UACA,cACA,aACA,QACA,eACA,UAEFC,WAAY,CACV,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,OAETC,KAAM,CACJ,QACA,WACA,aAEFC,SAAU,CACR,MAAO,MAAO,MAAO,OAEvBC,cAAe,CACb,gBACA,UAEFC,kBAAmB,CACjB,MAAO,OAETC,cAAe,CACb,QAEFC,kBAAmB,CACjB,OAEFC,UAAW,CACT,QACA,gBACA,WACA,aACA,eACA,cACA,gBACA,WACA,iBACA,YACA,UACA,UACA,UACA,SACA,cAEFC,UAAW,CACT,WACA,UACA,eAEFC,kBAAmB,CACjB,CAACC,aAAc,GAAIC,KAAM,WAAYC,YAAa,EAAE,OAAS,UAC7D,CAACF,cAAe,GAAIC,KAAM,cAAeC,YAAa,EAAE,SAAU,UAClE,CAACF,cAAe,GAAIC,KAAM,UAAWC,YAAa,EAAE,OAAS,UAG/DC,kBAAmB,CAAC,WCzDtB,IAAMC,EAAgB,CACpBC,MAAO,OACPC,SAAU,IACVC,OAAQ,UAkFKC,kLAvEbC,OAAA,WACE,IAGIC,EAAGC,EAAOC,EAHVC,EAAeC,KAAKC,MAAMC,MAAM,GAChCC,EAAaH,KAAKC,MAAMC,MAAM,GAqBlC,MAlB6B,WAAzBF,KAAKC,MAAMG,WACbP,EAAQ,IACRD,EAAI,IAAIS,IAAI/B,EAAQE,YACpBsB,EAAS,CAAC,GAAI,KACoB,SAAzBE,KAAKC,MAAMG,WACpBP,EAAQ,IACRD,EAAI,IAAIS,IAAI/B,EAAQI,UACpBoB,EAAS,CAAC,GAAI,KACoB,iBAAzBE,KAAKC,MAAMG,WACpBP,EAAQ,IACRC,EAAS,EAAE,IAAK,IAChBF,EAAI,IAAIS,IAAI/B,EAAQM,oBACc,iBAAzBoB,KAAKC,MAAMG,YACpBP,EAAQ,IACRC,EAAS,EAAE,YAAa,IACxBF,EAAI,IAAIS,IAAI/B,EAAQQ,oBAIpBwB,EAAAC,EAAAC,cAAA,OAAKC,MAAOnB,GACVgB,EAAAC,EAAAC,cAACE,EAAA,cAAD,CACEC,iBAAkB,CAAEd,MAAOA,GAC3BN,MAAO,KACPqB,OAAQ,IACRH,MAAO,CAAElB,MAAO,OAAQqB,OAAQ,SAEhCN,EAAAC,EAAAC,cAACE,EAAA,cAAD,CAAeZ,OAAQA,EAAQe,gBAAc,GAC3CP,EAAAC,EAAAC,cAACE,EAAA,YAAD,CAAaI,UAAU,4BACpB,SAACC,EAAaC,GAAd,OACCD,EAAYE,IAAI,SAACH,EAAWI,GAAZ,OAAoC,IAAlBJ,EAAUK,IAExCb,EAAAC,EAAAC,cAACE,EAAA,UAAD,CACEU,IAAKF,EACHJ,UAAWA,EACXE,WAAYA,EACZP,MAAO,CACLY,QAAS,CACPC,KAAM1B,EAAE2B,IAAIT,EAAUK,IAAMpB,EAAe,UAC3CyB,OAhDR,UAiDQC,YAhDR,IAiDQC,QAAS,QAEXC,MAAO,CACLL,KAAM1B,EAAE2B,IAAIT,EAAUK,IAAMhB,EAAa,UACzCqB,OAtDR,UAuDQC,YAtDR,IAuDQC,QAAS,QAEXE,QAAS,CACPN,KAAM,UACNE,OA5DR,UA6DQC,YA5DR,IA6DQC,QAAS,sBA3DdG,mBCZvB,IAAMvC,EAAgB,CACpBC,MAAO,OACPC,SAAU,IACVC,OAAQ,UAUJqC,EAAUxD,EAAQW,kBAmGT8C,0LA9FbC,cAAA,WACE,OACE1B,EAAAC,EAAAC,cAACE,EAAA,QAAD,KACGoB,EAAQb,IAAI,SAACgB,EAAQf,GAAT,OACXZ,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACEU,IAAKF,EACLe,OAAQA,EACRxB,MAAO,CACLY,QAAS,CAAEC,KAAM,WACjBK,MAAO,CAAEL,KAAM,WACfM,QAAS,CAAEN,KAAM,aAGnBhB,EAAAC,EAAAC,cAAA,UAAQ0B,GAAI,EAAGC,GAAI,EAAGC,EAAG,GACvB3B,MAAO,CACLe,OAAQ,UACRC,YAAa,EACbY,QAAS,MAGb/B,EAAAC,EAAAC,cAAA,QACE8B,WAAW,SACXC,EAAGN,EAAO/C,aACVuB,MAAO,CACL+B,WAAY,qBACZC,SAAU,OACVnB,KAAM,YAGPW,EAAO9C,aAQpBQ,OAAA,WACE,IAAII,EAAeC,KAAKC,MAAMC,MAAM,GAChCC,EAAaH,KAAKC,MAAMC,MAAM,GAG9B5B,EAAU,IAAI+B,IAAIL,KAAKC,MAAM3B,SAC7BwD,EAAU9B,KAAKC,MAAMyC,YAAc1C,KAAKgC,gBAAkB,KAE9D,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,MAAOnB,GACVgB,EAAAC,EAAAC,cAACE,EAAA,cAAD,CACEM,WAAW,WACXL,iBAAkB,CAAEd,MATd,MAUNN,MAAO,KACPqB,OAAQ,IACRH,MAAO,CAAElB,MAAO,OAAQqB,OAAQ,SAEhCN,EAAAC,EAAAC,cAACE,EAAA,cAAD,CAAeZ,OAbR,EAAE,GAAI,IAakBe,gBAAc,GAC3CP,EAAAC,EAAAC,cAACE,EAAA,YAAD,CAAaI,UAAU,4BACpB,SAACC,EAAaC,GAAd,OACCD,EAAYE,IAAI,SAACH,EAAWI,GAAZ,OACZZ,EAAAC,EAAAC,cAACE,EAAA,UAAD,CACEU,IAAKF,EACHJ,UAAWA,EACXE,WAAYA,EACZP,MAAO,CACLY,QAAS,CACPC,KAAMhD,EAAQiD,IAAIT,EAAU6B,WAAWC,QAAU7C,EAAe,UAChEyB,OA1ER,UA2EQC,YA1ER,IA2EQC,QAAS,QAEXC,MAAO,CACLL,KAAMhD,EAAQiD,IAAIT,EAAU6B,WAAWC,QAAUzC,EAAa,UAC9DqB,OAhFR,UAiFQC,YAhFR,IAiFQC,QAAS,QAEXE,QAAS,CACPN,KAAM,UACNE,OAtFR,UAuFQC,YAtFR,IAuFQC,QAAS,eAOvBI,SAxFMD,aChBpB,IAAMvC,EAAgB,CACpBC,MAAO,OACPC,SAAU,IACVC,OAAQ,UAUJoD,EAAU,IAAIxC,IAAI/B,EAAQe,mBA0DjByD,kLAtDbnD,OAAA,WACE,IAEII,EAAeC,KAAKC,MAAMC,MAAM,GAChCC,EAAaH,KAAKC,MAAMC,MAAM,GAElC,OACEI,EAAAC,EAAAC,cAAA,OAAKC,MAAOnB,GACVgB,EAAAC,EAAAC,cAACE,EAAA,cAAD,CACEM,WAAW,WACXL,iBAAkB,CAAEd,MATd,MAUNN,MAAO,KACPqB,OAAQ,IACRH,MAAO,CAAElB,MAAO,OAAQqB,OAAQ,SAEhCN,EAAAC,EAAAC,cAACE,EAAA,cAAD,CAAeZ,OAbR,EAAE,GAAI,MAakBe,gBAAc,GAC3CP,EAAAC,EAAAC,cAACE,EAAA,YAAD,CAAaI,UAAU,0CACpB,SAACC,EAAaC,GAAd,OACCD,EAAYE,IAAI,SAACH,EAAWI,GAAZ,OACZZ,EAAAC,EAAAC,cAACE,EAAA,UAAD,CACEU,IAAKF,EACHJ,UAAWA,EACXE,WAAYA,EACZP,MAAO,CACLY,QAAS,CACPC,KAAMuB,EAAQtB,IAAIT,EAAU6B,WAAWI,MAAQhD,EAAe,UAC9DyB,OAlCR,UAmCQC,YAlCR,IAmCQC,QAAS,QAEXC,MAAO,CACLL,KAAMuB,EAAQtB,IAAIT,EAAU6B,WAAWI,MAAQ5C,EAAa,UAC5DqB,OAxCR,UAyCQC,YAxCR,IAyCQC,QAAS,QAEXE,QAAS,CACPN,KAAM,UACNE,OA9CR,UA+CQC,YA9CR,IA+CQC,QAAS,sBAzCjBG,qDCCLmB,kLAvBbrD,OAAA,WACE,IAAIC,EAAII,KAAKC,MAAM3B,QACf2E,EAAOjD,KAAKC,MAAMgD,KAClBC,EAAO,GAMX,OAJAtD,EAAEuD,QAAQ,SAACC,GAAD,OAAOF,EAAKG,KACpB/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KAAKhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAM9C,MAAO,CAAE+C,UAAS,SAAaJ,OAI1C9C,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAKC,OAAQ,IACXpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAKC,KAAM,GACTtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAWC,MAAOb,EAAMc,MAAOnE,EAAEoE,UAEnC1D,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAKC,KAAM,IACPV,QAhBcrB,2FCWlBoC,EAA2BC,IAA3BD,MAAkBE,GAASD,IAApBE,UAAoBF,IAATC,MAMpBE,GALcC,IAAZC,wLAMN5E,OAAA,WAAS,IAED6E,EADWxE,KAAKC,MAAdwE,KACeC,KAAKC,aAAab,MAEzC,OACExD,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAQC,SAAU7E,KAAKC,MAAM4E,SAAUf,MAAOU,GAC5ClE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAKhB,MAAM,SACXxD,EAAAC,EAAAC,cAACyD,EAAD,aACA3D,EAAAC,EAAAC,cAAC2D,EAAD,kDAIA7D,EAAAC,EAAAC,cAACyD,EAAD,CAAOc,MAAO,GAAd,kBACAzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,8BACA1E,EAAAC,EAAAC,cAACyE,EAAD,CAAO/E,MAAO,CAAC,UAAW,aAE1BI,EAAAC,EAAAC,cAACyD,EAAD,CAAOc,MAAO,GAAd,oBACAzE,EAAAC,EAAAC,cAAC0E,EAAD,CAAOxC,aAAW,EAACxC,MAAO,CAAC,UAAW,aACtCI,EAAAC,EAAAC,cAAC2E,EAAD,CAAa7G,QAASA,EAAQU,UAAWiE,KAAK,WAE9C3C,EAAAC,EAAAC,cAACyD,EAAD,CAAOc,MAAO,GAAd,sBACAzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,sBACA1E,EAAAC,EAAAC,cAAC0E,EAAD,CAAO5G,QAASA,EAAQS,UAAWmB,MAAO,CAAC,UAAW,aACtDI,EAAAC,EAAAC,cAAC2E,EAAD,CAAa7G,QAASA,EAAQS,UAAWkE,KAAK,WAC9C3C,EAAAC,EAAAC,cAACwE,EAAA,EAAD,sBACA1E,EAAAC,EAAAC,cAAC4E,EAAD,CAAUhF,UAAU,eAAeF,MAAO,CAAC,UAAW,aACtDI,EAAAC,EAAAC,cAAC2E,EAAD,CAAa7G,QAASA,EAAQK,cAAesE,KAAK,cAClD3C,EAAAC,EAAAC,cAACwE,EAAA,EAAD,sBACA1E,EAAAC,EAAAC,cAAC4E,EAAD,CAAUhF,UAAU,eAAeF,MAAO,CAAC,UAAW,aACtDI,EAAAC,EAAAC,cAAC2E,EAAD,CAAa7G,QAASA,EAAQO,cAAeoE,KAAK,cAClD3C,EAAAC,EAAAC,cAACwE,EAAA,EAAD,eACA1E,EAAAC,EAAAC,cAAC4E,EAAD,CAAUhF,UAAU,SAASF,MAAO,CAAC,UAAW,aAChDI,EAAAC,EAAAC,cAAC2E,EAAD,CAAa7G,QAASA,EAAQC,OAAQ0E,KAAK,cAC3C3C,EAAAC,EAAAC,cAACwE,EAAA,EAAD,aACA1E,EAAAC,EAAAC,cAAC4E,EAAD,CAAUhF,UAAU,OAAOF,MAAO,CAAC,UAAW,aAC9CI,EAAAC,EAAAC,cAAC2E,EAAD,CAAa7G,QAASA,EAAQG,KAAMwE,KAAK,mBApC9BpB,cA6CNwD,GAFEhB,YAEO,gDClEtB,IAAAiB,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAI,EAAAJ,EAAAE,EAAAC,GAAAH,EAAAK,EAAAC,EAAA,sBAAAF,EAAApF,IAAAgF,EAAA,KAAAA,EAAA,GAcyBO,QAAOC,QAELC,IAAMC,cAAc,yBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAE7E,SAAY6E,oCCA/CX,EAAAK,EAAAC,EAAA,sBAAAS,IAAAf,EAAAK,EAAAC,EAAA,sBAAAhG,IAAA,IAAA0G,EAAAhB,EAAA,KAEMiB,EAAa,IAFnBjB,EAAAE,EAAAc,GAEuBrC,GAAW,CAChCuC,iBAAkB,CAChB,gBACA,qBACA,WACA,cACA,mBACA,kBACA,iBACA,YACA,QACA,aACA,oBACA,iBACA,mBAEFC,eAAgB,CACd,gBACA,qBACA,WACA,cACA,mBACA,kBACA,iBACA,YACA,QACA,aACA,oBACA,iBACA,qBASWF,IACFF,EAASE,EAAWF,OACpBzG,EAAQ2G,EAAW3G,iFCpBjB8G,UAjBU,SAAAC,GAAiC,IAA9B/B,EAA8B+B,EAA9B/B,SAAUgC,EAAoBD,EAApBC,cACpC,OAAKA,EAGEb,IAAMxF,cAAcsG,IAApBC,OAAAC,OAAA,CACLnC,WACAgC,iBACGA,EAAcI,OALV,qICDO/C,IAAVD,UAEFiD,kLAEJvH,OAAA,WAAS,IAGHwH,EAHGC,EAC+BpH,KAAKC,MAAnC4E,EADDuC,EACCvC,SAAUf,EADXsD,EACWtD,MAAOuD,EADlBD,EACkBC,SAGzB,GAFc,MAEVxC,EAASyC,SACXH,EACEI,EAAAhH,EAAAC,cAAA,MACEC,MAAKsG,OAAAC,OAAA,GACAnH,YAAM,KADN,CAEH2H,aAAclB,YAAO,KACrBmB,UAAW,KAGbF,EAAAhH,EAAAC,cAACkH,EAAA,EAAD,CACEjH,MAAO,CACL+C,UAAS,OACTmE,eAAc,OACdzH,MAAK,WAEP0H,GAAE,KAED9D,QAIF,CACL,IAAI+D,EAAchD,EAASyC,SAASQ,MAAM,KAIpCC,GAHNF,EAAcA,EAAYG,OAAO,SAACC,GAAD,MAAmB,KAATA,KAGnBhH,IAAI,SAACiH,EAAMhH,GACjC,IAAIiH,EAAG,IAAOD,EAEVE,EAAQF,EAAKJ,MAAM,KACpB7G,IAAI,SAACgH,GAAD,OAAUA,EAAKI,OAAO,GAAGC,cAAgBL,EAAKM,MAAM,KACxDC,KAAK,KAER,OAAItH,IAAM2G,EAAY7D,OAAS,EACrBuD,EAAAhH,EAAAC,cAACiI,EAAA,EAAWC,KAAZ,KAAmBN,GAErBb,EAAAhH,EAAAC,cAACiI,EAAA,EAAWC,KAAZ,KACNnB,EAAAhH,EAAAC,cAACkH,EAAA,EAAD,CAAME,GAAIO,GAAOC,MAIrBjB,EACEI,EAAAhH,EAAAC,cAAA+G,EAAAhH,EAAAoI,SAAA,KACApB,EAAAhH,EAAAC,cAACiI,EAAA,EAAD,KACElB,EAAAhH,EAAAC,cAACiI,EAAA,EAAWC,KAAZ,KACEnB,EAAAhH,EAAAC,cAACkH,EAAA,EAAD,CAAME,GAAG,KAAIL,EAAAhH,EAAAC,cAACoI,EAAA,EAAD,CAAMC,KAAK,SAAU,IAAlC,SAEAd,GAEJR,EAAAhH,EAAAC,cAACsI,EAAA,EAAD,OAIJ,OACEvB,EAAAhH,EAAAC,cAAA,OACEC,MAAO,CACLsI,WAAU,OACVC,YAAW,OACXxJ,SAAU8G,YAAO,IACjB2C,QAAY3C,YAAO,KAAZ,IAAoBA,YAAO,OAGtCiB,EAAAhH,EAAAC,cAAA,cAAS2G,GACTI,EAAAhH,EAAAC,cAAA,YAAO6G,GACPE,EAAAhH,EAAAC,cAAA,UAAQC,MAAO,CAACyI,UAAW,WAA3B,MACK,IAAIC,MAAOC,cADhB,0BAtEevH,aA8ENqF,uFC1Ef,SAASmC,EAATzC,GAAiD,IAAlC0C,EAAkC1C,EAAlC0C,YAAaC,EAAqB3C,EAArB2C,KAAMC,EAAe5C,EAAf4C,KAAM1F,EAAS8C,EAAT9C,MAC9BY,EADuC+E,EAAAhF,KACvCC,KAcFgF,EAAkBJ,GAAe5E,EAAKC,aAAa2E,YAEzD,OACEK,EAAApJ,EAAAC,cAACoJ,EAAArJ,EAAD,CACEsJ,eAAgB,CACdN,QAEFzF,MAAOA,EACPgG,cAAa,QAAUpF,EAAKC,aAAab,MACzC0F,KAAM,CACJ,CACErK,KAAI,cACJ4K,QAASL,GAEX,CACEM,SAAQ,WACRD,QAASjG,GAEX,CACEkG,SAAQ,iBACRD,QAASL,GAEX,CACEM,SAAQ,UACRD,QAAO,WAET,CACE5K,KAAI,eACJ4K,QAAO,WAET,CACE5K,KAAI,kBACJ4K,QAASrF,EAAKC,aAAasF,QAE7B,CACE9K,KAAI,gBACJ4K,QAASjG,GAEX,CACE3E,KAAI,sBACJ4K,QAASL,IAEXQ,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAI,KACJC,KAAM,GACNF,YAAW,IAUED","file":"component---src-pages-about-maps-js-60190bcb9a7a0c8f85cc.js","sourcesContent":["const visited = {\n  europe: [\n    'United Kingdom',\n    'France',\n    'Switzerland',\n    'Germany',\n    'Spain',\n    'Monaco',\n    'Belgium',\n    'Netherlands',\n    'Luxembourg',\n    'Italy',\n    'Vatican City',\n    'Greece'\n  ],\n  europe_iso: [\n    'GBR', 'FRA', 'BEL', 'CHE', 'DEU', 'MCO', 'GRC', 'ITA', 'VAT', 'LUX',\n    'NLD', 'ESP'\n  ],\n  asia: [\n    'China',\n    'Malaysia',\n    'Singapore'\n  ],\n  asia_iso: [\n    'HKG', 'CHN', 'MYS', 'SGP'\n  ],\n  north_america: [\n    'United States',\n    'Canada'\n  ],\n  north_america_iso: [\n    'USA', 'CAN'\n  ],\n  south_america: [\n    'Peru'\n  ],\n  south_america_iso: [\n    'PER'\n  ],\n  us_states: [\n    'Maine',\n    'New Hampshire',\n    'New York',\n    'New Jersey',\n    'Pennsylvania',\n    'Connecticut',\n    'Massachusetts',\n    'Virginia',\n    'North Carolina',\n    'Tennessee',\n    'Georgia',\n    'Florida',\n    'Arizona',\n    'Nevada',\n    'California'\n  ],\n  us_cities: [\n    'New York',\n    'Atlanta',\n    'Los Angeles'\n  ],\n  us_cities_markers: [\n    {markerOffset: 45, name: 'New York', coordinates: [-74.0060, 40.7128]},\n    {markerOffset: -25, name: 'Los Angeles', coordinates: [-118.2437, 34.0522]},\n    {markerOffset: -25, name: 'Atlanta', coordinates: [-84.3880, 33.7490]},\n  ],\n  // , 'Suffolk', 'Kings', 'Queens'\n  new_york_counties: ['Nassau']\n\n};\n\nexport default visited;\n","import React, { Component } from 'react';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Annotation\n} from 'react-simple-maps';\n\nimport visited from '../config/map-metadata';\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\",\n  //border: '1px',\n  //borderColor: 'black',\n  //borderStyle: 'solid'\n};\n\nconst strokeColor = '#607D8B';\nconst strokeWidth = 0.75;\n\nclass WorldMap extends Component {\n\n  render() {\n    let visitedColor = this.props.color[0];\n    let hoverColor = this.props.color[1];\n\n    let v, scale, center, anno;\n    if (this.props.continent === 'europe') {\n      scale = 2000;\n      v = new Set(visited.europe_iso);\n      center = [10, 49];\n    } else if (this.props.continent === 'asia') {\n      scale = 900;\n      v = new Set(visited.asia_iso);\n      center = [95, 30];\n    } else if (this.props.continent === 'northAmerica') {\n      scale = 800;\n      center = [-100, 50];\n      v = new Set(visited.north_america_iso);\n    } else if (this.props.continent === 'southAmerica') {\n      scale = 800;\n      center = [-74.0563123, -15];\n      v = new Set(visited.south_america_iso);\n    }\n\n    return (\n      <div style={wrapperStyles}>\n        <ComposableMap\n          projectionConfig={{ scale: scale }}\n          width={1400}\n          height={1000}\n          style={{ width: \"100%\", height: \"auto\" }}\n        >\n          <ZoomableGroup center={center} disablePanning>\n            <Geographies geography='/topojson/world-50m.json'>\n              {(geographies, projection) =>\n                geographies.map((geography, i) => geography.id !== -1 && (\n\n                    <Geography\n                      key={i}\n                        geography={geography}\n                        projection={projection}\n                        style={{\n                          default: {\n                            fill: v.has(geography.id) ? visitedColor : '#ECEFF1',\n                            stroke: strokeColor,\n                            strokeWidth: strokeWidth,\n                            outline: 'none',\n                          },\n                          hover: {\n                            fill: v.has(geography.id) ? hoverColor : '#CFD8DC',\n                            stroke: strokeColor,\n                            strokeWidth: strokeWidth,\n                            outline: 'none',\n                          },\n                          pressed: {\n                            fill: '#26547C',\n                            stroke: strokeColor,\n                            strokeWidth: strokeWidth,\n                            outline: 'none',\n                          },\n                        }}\n                    />\n                ))\n              }\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    )\n  }\n}\n\nexport default WorldMap;\n","import React, { Component } from 'react';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Markers,\n  Marker,\n} from 'react-simple-maps';\nimport visited from '../config/map-metadata';\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\",\n  //border: '1px',\n  //borderColor: 'black',\n  //borderStyle: 'solid'\n};\n\nconst strokeColor = '#607D8B';\nconst strokeWidth = 0.75;\n\n\nconst markers = visited.us_cities_markers;\n\n\nclass USMap extends Component {\n\n  renderMarkers() {\n    return (\n      <Markers>\n        {markers.map((marker, i) => (\n          <Marker\n            key={i}\n            marker={marker}\n            style={{\n              default: { fill: \"#FF5722\" },\n              hover: { fill: \"#FFFFFF\" },\n              pressed: { fill: \"#FF5722\" },\n            }}\n            >\n            <circle cx={0} cy={0} r={10}\n              style={{\n                stroke: \"#FF5722\",\n                strokeWidth: 3,\n                opacity: 0.9,\n              }}\n            />\n            <text\n              textAnchor=\"middle\"\n              y={marker.markerOffset}\n              style={{\n                fontFamily: \"Roboto, sans-serif\",\n                fontSize: '28px',\n                fill: \"#607D8B\",\n              }}\n              >\n              {marker.name}\n            </text>\n          </Marker>\n        ))}\n      </Markers>\n    );\n  }\n\n  render() {\n    let visitedColor = this.props.color[0];\n    let hoverColor = this.props.color[1];\n    let scale = 1350;\n    let center = [-96, 39];\n    let visited = new Set(this.props.visited);\n    let markers = this.props.showMarkers ? this.renderMarkers() : null;\n\n    return (\n      <div style={wrapperStyles}>\n        <ComposableMap\n          projection='mercator'\n          projectionConfig={{ scale: scale }}\n          width={1400}\n          height={900}\n          style={{ width: \"100%\", height: \"auto\" }}\n        >\n          <ZoomableGroup center={center} disablePanning>\n            <Geographies geography='/topojson/us-states.json'>\n              {(geographies, projection) =>\n                geographies.map((geography, i) => (\n                    <Geography\n                      key={i}\n                        geography={geography}\n                        projection={projection}\n                        style={{\n                          default: {\n                            fill: visited.has(geography.properties.NAME_1) ? visitedColor : '#ECEFF1',\n                            stroke: strokeColor,\n                            strokeWidth: strokeWidth,\n                            outline: \"none\",\n                          },\n                          hover: {\n                            fill: visited.has(geography.properties.NAME_1) ? hoverColor : '#CFD8DC',\n                            stroke: strokeColor,\n                            strokeWidth: strokeWidth,\n                            outline: \"none\",\n                          },\n                          pressed: {\n                            fill: '#26547C',\n                            stroke: strokeColor,\n                            strokeWidth: strokeWidth,\n                            outline: 'none',\n                          },\n                        }}\n                    />\n                ))\n              }\n            </Geographies>\n            { markers }\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    )\n  }\n}\n\nexport default USMap;\n","import React, { Component } from 'react';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Markers,\n  Marker,\n} from 'react-simple-maps';\nimport visited from '../config/map-metadata';\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\",\n  //border: '1px',\n  //borderColor: 'black',\n  //borderStyle: 'solid'\n};\n\nconst strokeColor = '#607D8B';\nconst strokeWidth = 0.75;\n\n\nconst include = new Set(visited.new_york_counties);\n\n\nclass NYMap extends Component {\n  render() {\n    let scale = 8500;\n    let center = [-76, 42.9];\n    let visitedColor = this.props.color[0];\n    let hoverColor = this.props.color[1];\n\n    return (\n      <div style={wrapperStyles}>\n        <ComposableMap\n          projection='mercator'\n          projectionConfig={{ scale: scale }}\n          width={1400}\n          height={1000}\n          style={{ width: \"100%\", height: \"auto\" }}\n        >\n          <ZoomableGroup center={center} disablePanning>\n            <Geographies geography='/topojson/ny-36-new-york-counties.json'>\n              {(geographies, projection) =>\n                geographies.map((geography, i) => (\n                    <Geography\n                      key={i}\n                        geography={geography}\n                        projection={projection}\n                        style={{\n                          default: {\n                            fill: include.has(geography.properties.NAME) ? visitedColor : '#ECEFF1',\n                            stroke: strokeColor,\n                            strokeWidth: strokeWidth,\n                            outline: 'none',\n                          },\n                          hover: {\n                            fill: include.has(geography.properties.NAME) ? hoverColor : '#CFD8DC',\n                            stroke: strokeColor,\n                            strokeWidth: strokeWidth,\n                            outline: 'none',\n                          },\n                          pressed: {\n                            fill: '#26547C',\n                            stroke: strokeColor,\n                            strokeWidth: strokeWidth,\n                            outline: 'none',\n                          },\n                        }}\n                    />\n                ))\n              }\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    )\n  }\n}\n\nexport default NYMap;\n","import React, { Component } from 'react';\nimport { Link } from 'gatsby';\nimport { Tag, Statistic, Row, Col } from 'antd';\n\nclass VisitedStat extends Component {\n  render() {\n    let v = this.props.visited;\n    let stat = this.props.stat; // Countries, States, etc.\n    let tags = [];\n\n    v.forEach((x) => tags.push(\n      <Tag><Link style={{ boxShadow: `none` }}>{x}</Link></Tag>\n    ));\n\n    return (\n      <Row gutter={16}>\n        <Col span={6}>\n          <Statistic title={stat} value={v.length} />\n        </Col>\n        <Col span={18}>\n          { tags }\n        </Col>\n      </Row>\n    );\n  }\n\n}\n\nexport default VisitedStat;\n","import React, { Component } from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Layout from '../../components/layout';\nimport SEO from '../../components/seo';\n\nimport WorldMap from '../../components/world-map';\nimport USMap from '../../components/us-map';\nimport NYMap from '../../components/ny-map';\nimport VisitedStat from '../../components/visited-stat';\n\nimport { Tabs, Tag, Statistic, Row, Col } from 'antd';\nimport { Typography, Divider } from 'antd';\n\nimport visited from '../../config/map-metadata';\nimport 'antd/dist/antd.css';\nconst { Title, Paragraph, Text } = Typography;\nconst { TabPane } = Tabs;\n\n/*\nThis is the Travel Page\n*/\nclass Maps extends Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n\n    return(\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"Maps\" />\n        <Title>Maps</Title>\n        <Text>\n          Learn more about me through these 7 maps.\n        </Text>\n\n        <Title level={3}>Where I'm From</Title>\n        <Divider>Long Island, New York</Divider>\n        <NYMap color={['#F09D51', '#DB8F4A']}/>\n\n        <Title level={3}>Where I've Lived</Title>\n        <USMap showMarkers color={['#D7C0D0', '#C4AFBE']}/>\n        <VisitedStat visited={visited.us_cities} stat='Cities'/>\n\n        <Title level={3}>Where I've Visited</Title>\n        <Divider>United States</Divider>\n        <USMap visited={visited.us_states} color={['#D7C0D0', '#C4AFBE']} />\n        <VisitedStat visited={visited.us_states} stat='States'/>\n        <Divider>North America</Divider>\n        <WorldMap continent='northAmerica' color={['#3DD6D0', '#38C3BE']} />\n        <VisitedStat visited={visited.north_america} stat='Countries'/>\n        <Divider>South America</Divider>\n        <WorldMap continent='southAmerica' color={['#EF476F', '#DA4165']} />\n        <VisitedStat visited={visited.south_america} stat='Countries'/>\n        <Divider>Europe</Divider>\n        <WorldMap continent='europe' color={['#FFD166', '#E8BE5D']} />\n        <VisitedStat visited={visited.europe} stat='Countries'/>\n        <Divider>Asia</Divider>\n        <WorldMap continent='asia' color={['#06D6A0', '#06C392']} />\n        <VisitedStat visited={visited.asia} stat='Countries'/>\n\n      </Layout>\n    );\n  }\n}\n\nexport default Maps;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import Typography from 'typography';\n\nconst typography = new Typography({\n  headerFontFamily: [\n    '-apple-system',\n    'BlinkMacSystemFont',\n    'Segoe UI',\n    'PingFang SC',\n    'Hiragino Sans GB',\n    'Microsoft YaHei',\n    'Helvetica Neue',\n    'Helvetica',\n    'Arial',\n    'sans-serif',\n    'Apple Color Emoji',\n    'Segoe UI Emoji',\n    'Segoe UI Symbol'\n  ],\n  bodyFontFamily: [\n    '-apple-system',\n    'BlinkMacSystemFont',\n    'Segoe UI',\n    'PingFang SC',\n    'Hiragino Sans GB',\n    'Microsoft YaHei',\n    'Helvetica Neue',\n    'Helvetica',\n    'Arial',\n    'sans-serif',\n    'Apple Color Emoji',\n    'Segoe UI Emoji',\n    'Segoe UI Symbol'\n  ]\n});\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles()\n}\n\nexport default typography;\nexport const rhythm = typography.rhythm;\nexport const scale = typography.scale;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React, { Component } from 'react';\nimport { Link } from 'gatsby';\nimport { rhythm, scale } from '../utils/typography';\nimport { Breadcrumb, Typography, Icon, Divider } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst { Title } = Typography;\n\nclass Layout extends Component {\n\n  render() {\n    const { location, title, children } = this.props;\n    const rootPath = `${__PATH_PREFIX__}/`;\n    let header;\n    if (location.pathname === rootPath) {\n      header = (\n        <h1\n          style={{\n            ...scale(1.5),\n            marginBottom: rhythm(1.5),\n            marginTop: 0,\n          }}\n        >\n          <Link\n            style={{\n              boxShadow: `none`,\n              textDecoration: `none`,\n              color: `inherit`,\n            }}\n            to={`/`}\n          >\n            {title}\n          </Link>\n        </h1>\n      )\n    } else {\n      let breadcrumbs = location.pathname.split('/');\n      breadcrumbs = breadcrumbs.filter((elem) => elem !== '');\n\n      // fixed nested links at some point\n      const nav = breadcrumbs.map((page, i) => {\n        let url = `/${page}`;\n\n        let crumb = page.split('-')\n          .map((elem) => elem.charAt(0).toUpperCase() + elem.slice(1))\n          .join(' ');\n\n        if (i === breadcrumbs.length - 1) {\n          return (<Breadcrumb.Item>{ crumb }</Breadcrumb.Item>);\n        }\n        return (<Breadcrumb.Item>\n          <Link to={url}>{ crumb }</Link>\n        </Breadcrumb.Item>);\n      });\n\n      header = (\n        <>\n        <Breadcrumb>\n          <Breadcrumb.Item>\n            <Link to='/'><Icon type='home' />{' '}Home</Link>\n          </Breadcrumb.Item>\n          { nav }\n        </Breadcrumb>\n        <Divider />\n        </>\n      );\n    }\n    return (\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(24),\n          padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`\n        }}\n      >\n      <header>{header}</header>\n      <main>{children}</main>\n      <footer style={{textAlign: 'center'}}>\n        © {new Date().getFullYear()} Christopher Shen\n      </footer>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}